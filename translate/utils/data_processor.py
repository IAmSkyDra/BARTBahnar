import pandas as pd
import os

class DataProcessor:
    def __init__(self, output_dir="../data"):
        """
        Kh·ªüi t·∫°o v·ªõi danh s√°ch URL c·ªë ƒë·ªãnh v√† th∆∞ m·ª•c ƒë·∫ßu ra.
        """
        self.urls = [
            "https://docs.google.com/spreadsheets/d/1_lcoKY79oM7WsDCM1-yCQ24kZzL99NU-/export?format=csv",
            "https://docs.google.com/spreadsheets/d/1lvpUQC4VWqYFHGmsqbeC-pVeTnmltdah/export?format=csv",
            "https://docs.google.com/spreadsheets/d/1jnX96jO81FZVRJQ6iy-b_7SMtFztOtIt/export?format=csv"
        ]
        self.output_dir = output_dir
        self.dataframes = []
        self.rows_per_file = []
        self.rows_removed = 0
        self.removed_rows_info = []
        self.duplicates_removed = 0
        self.merged_df = None

        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        os.makedirs(self.output_dir, exist_ok=True)

    def load_and_clean_data(self):
        """
        ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c URL, lo·∫°i b·ªè h√†ng kh√¥ng h·ª£p l·ªá v√† d·ªØ li·ªáu tr√πng l·∫∑p.
        """
        for url in self.urls:
            df = pd.read_csv(url)

            if "ti·∫øng bana" in df.columns and "ti·∫øng vi·ªát" in df.columns:
                initial_rows = df.shape[0]
                self.rows_per_file.append(initial_rows)

                # T√¨m c√°c h√†ng c√≥ m·ªôt c·ªôt b·ªã thi·∫øu
                invalid_rows = df[(df["ti·∫øng bana"].isna() & ~df["ti·∫øng vi·ªát"].isna()) |
                                  (~df["ti·∫øng bana"].isna() & df["ti·∫øng vi·ªát"].isna())]

                self.rows_removed += invalid_rows.shape[0]
                self.removed_rows_info.append((url, invalid_rows.index.tolist()))

                # Lo·∫°i b·ªè h√†ng kh√¥ng h·ª£p l·ªá
                df = df.drop(invalid_rows.index)
                self.dataframes.append(df[["ti·∫øng bana", "ti·∫øng vi·ªát"]])

        # G·ªôp t·∫•t c·∫£ c√°c DataFrame l·∫°i
        self.merged_df = pd.concat(self.dataframes, ignore_index=True)

        # X√≥a c√°c b·∫£n ghi tr√πng l·∫∑p
        initial_merged_rows = self.merged_df.shape[0]
        self.merged_df = self.merged_df.drop_duplicates(subset=["ti·∫øng bana"]).drop_duplicates(subset=["ti·∫øng vi·ªát"])
        self.duplicates_removed = initial_merged_rows - self.merged_df.shape[0]

    def save_clean_data(self, output_filename="final.csv"):
        """
        L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o file CSV trong th∆∞ m·ª•c 'data/'.
        """
        output_path = os.path.join(self.output_dir, output_filename)
        if self.merged_df is not None:
            self.merged_df.to_csv(output_path, index=False)
            # print(f"‚úÖ D·ªØ li·ªáu s·∫°ch ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {output_path}")
        else:
            print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u!")

    def extract_sentences(self, column_name="ti·∫øng bana", output_filename="bana_data.txt"):
        """
        Tr√≠ch xu·∫•t c√¢u t·ª´ m·ªôt c·ªôt c·ª• th·ªÉ v√† l∆∞u v√†o file vƒÉn b·∫£n trong th∆∞ m·ª•c 'data/'.
        """
        if self.merged_df is None or column_name not in self.merged_df.columns:
            raise ValueError(f"‚ö†Ô∏è C·ªôt '{column_name}' kh√¥ng t·ªìn t·∫°i ho·∫∑c d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c load!")

        # Chu·∫©n h√≥a v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        self.merged_df[column_name] = self.merged_df[column_name].str.normalize('NFKC').str.strip()

        # L·ªçc c√°c c√¢u duy nh·∫•t
        sentences = self.merged_df[column_name].dropna().str.strip().unique()

        output_path = os.path.join(self.output_dir, output_filename)
        with open(output_path, "w", encoding="utf-8") as f:
            for sentence in sentences:
                if sentence:
                    f.write(sentence + "\n")

        # print(f"‚úÖ ƒê√£ l∆∞u {len(sentences)} c√¢u v√†o '{output_path}'")

    def print_summary(self):
        """
        In t√≥m t·∫Øt qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu.
        """
        # print("üìä T√≥m t·∫Øt qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu:")
        # print("T·ªïng s·ªë file:", len(self.urls))
        # print("S·ªë h√†ng trong t·ª´ng file ban ƒë·∫ßu:", self.rows_per_file)
        # print("S·ªë h√†ng b·ªã x√≥a do ch·ªâ c√≥ gi√° tr·ªã ·ªü m·ªôt c·ªôt:", self.rows_removed)
        # print("S·ªë h√†ng tr√πng l·∫∑p b·ªã x√≥a:", self.duplicates_removed)
        # print("S·ªë h√†ng c√≤n l·∫°i sau khi x·ª≠ l√Ω:", self.merged_df.shape[0] if self.merged_df is not None else 0)
        # print("ƒê·ªãa ch·ªâ c·ªßa c√°c h√†ng b·ªã x√≥a:")
        # for file, rows in self.removed_rows_info:
        #     print(f"File: {file}, H√†ng b·ªã x√≥a: {rows}")
